package controller;

import Database.DatabaseAppointments;
import Database.DatabaseReports;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Appointments;
import model.Contacts;
import util.ErrorHandling;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/**Controller Class for Reports*/
public class Reports implements Initializable {
    public ComboBox reportCombo;
    public Button generateButton;
    public TextArea reportField;

    final String r1 = "Total Apts by Type and Month";
    final String r2 = "Contact Schedule";
    final String r3 = "Grand Total Hours";
    public TableView reportsTable;
    public TableColumn aptID;
    public TableColumn title;
    public TableColumn description;
    public TableColumn type;
    public TableColumn start;
    public TableColumn end;
    public ComboBox contactComboBox;
    public ComboBox selectMonth;
    public ComboBox typeCombo;
    public TableColumn cusID;


    /**Returns User to CustomerController
     * @param actionEvent Action Event for Return Button*/
    public void onReturn(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/Customers.fxml"));
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 1100, 550);
        stage.setTitle("Customers");
        stage.setScene(scene);
        stage.show();
    }

    /**Populates text field with reports by type and month generated by 2 database calls*/
    public void reportByTypeMonth(){
        String month = (String) selectMonth.getSelectionModel().getSelectedItem();
        String type1 = (String) typeCombo.getSelectionModel().getSelectedItem();
        ObservableList<Appointments> appointments =DatabaseReports.getReportByMonthType(month, type1);
        reportsTable.setItems(appointments);
        aptID.setCellValueFactory(new PropertyValueFactory<>("appointment_ID"));
        title.setCellValueFactory(new PropertyValueFactory<>("title"));
        description.setCellValueFactory(new PropertyValueFactory<>("description"));
        type.setCellValueFactory(new PropertyValueFactory<>("type"));
        start.setCellValueFactory(new PropertyValueFactory<>("startDateTime"));
        end.setCellValueFactory(new PropertyValueFactory<>("endDateTime"));
        cusID.setCellValueFactory(new PropertyValueFactory<>("customerId"));
    }

    /**Populates text field with a list of all contacts paired with their respective upcoming appointments.*/
    public void reportByContactSchedule(){
        Contacts selectedContact = (Contacts) contactComboBox.getSelectionModel().getSelectedItem();
        int id = selectedContact.getContactID();
        ObservableList<Appointments> apts = DatabaseReports.getContactAppointments(id);

        if(apts.isEmpty()){
            ErrorHandling.displayInformation("Chosen Contact has no upcoming appointments.");
        }

        else {
            reportsTable.setItems(apts);
            aptID.setCellValueFactory(new PropertyValueFactory<>("appointment_ID"));
            title.setCellValueFactory(new PropertyValueFactory<>("title"));
            description.setCellValueFactory(new PropertyValueFactory<>("description"));
            type.setCellValueFactory(new PropertyValueFactory<>("type"));
            start.setCellValueFactory(new PropertyValueFactory<>("startDateTime"));
            end.setCellValueFactory(new PropertyValueFactory<>("endDateTime"));
            cusID.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        }
    }

    public void onSelectMonth(ActionEvent actionEvent) {
        typeCombo.setItems(null);
        String selectedMonth = (String) selectMonth.getSelectionModel().getSelectedItem();
        ObservableList<String> typeList = DatabaseReports.getReportByType(selectedMonth);
        typeCombo.setItems(typeList);
    }

    public void onChooseReport(ActionEvent actionEvent) {
        if(reportCombo.getSelectionModel().getSelectedItem() == r1){
            contactComboBox.setDisable(true);
            typeCombo.setDisable(false);
            selectMonth.setDisable(false);
        }
        if(reportCombo.getSelectionModel().getSelectedItem() == r2){
            selectMonth.setDisable(true);
            typeCombo.setDisable(true);
            contactComboBox.setDisable(false);
        }
        if(reportCombo.getSelectionModel().getSelectedItem() == r3){
            typeCombo.setDisable(true);
            contactComboBox.setDisable(true);
            selectMonth.setDisable(true);
        }
    }

    public interface CalculateTotalHours{
        int calculate(int hour1, int hour2);
    }

    /**LAMBDA 2 IS FOUND HERE AS WELL AS REPORT 3. Method populates text field with a grand total of hours needed
     * across all appointments. JUSTIFICATION: COULD BE USED TO PROVIDE ADDITIONAL FUNCTIONALITY TO THE APPLICATION
     * TO PROVIDE FAIR SCHEDULING FOR EACH CONTACT.*/
    public void reportByTotalHours(){
        ObservableList<Appointments> appointments = DatabaseAppointments.getAllAppointments();
        int totalHours = 0;

        for(Appointments a : appointments){
            CalculateTotalHours calculateTotalHours = (hour1, hour2) -> hour1 - hour2;
            totalHours += calculateTotalHours.calculate(a.getEndDateTime().getHour(), a.getStartDateTime().getHour());

        }
        ErrorHandling.displayInformation("Total hours for upcoming appointments: " +totalHours);
    }

    /**Generates a report based on which report is populated in the combo box
     * @param actionEvent Action Event for the Generate Button*/
    public void onGenerate(ActionEvent actionEvent) {
        if(reportCombo.getSelectionModel().getSelectedItem() == r1){
            reportByTypeMonth();
        }
        if(reportCombo.getSelectionModel().getSelectedItem() == r2){
            reportsTable.setItems(null);
            reportByContactSchedule();
        }
        if(reportCombo.getSelectionModel().getSelectedItem() == r3){
            reportByTotalHours();
        }
        if(reportCombo.getSelectionModel().getSelectedItem() == null){
            ErrorHandling.displayError("Please select an option from the combo box above.");
        }
    }

    /**Initialize method populates the combo box with each report option for the user to select.*/
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ObservableList<Contacts> contactList = DatabaseAppointments.getAllContacts();
        contactComboBox.setItems(contactList);
        ObservableList<String> monthList = DatabaseReports.getReportByMonth();
        selectMonth.setItems(monthList);

        reportCombo.getItems().addAll(r1, r2, r3);
    }
}
